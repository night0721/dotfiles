diff --git a/config.def.h b/config.def.h
index 9009517..9d21396 100644
--- a/config.def.h
+++ b/config.def.h
@@ -6,11 +6,11 @@
 /* appearance */
 static const int sloppyfocus               = 1;  /* focus follows mouse */
 static const int bypass_surface_visibility = 0;  /* 1 means idle inhibitors will disable idle tracking even if it's surface isn't visible  */
-static const unsigned int borderpx         = 1;  /* border pixel of windows */
-static const float rootcolor[]             = COLOR(0x222222ff);
-static const float bordercolor[]           = COLOR(0x444444ff);
-static const float focuscolor[]            = COLOR(0x005577ff);
-static const float urgentcolor[]           = COLOR(0xff0000ff);
+static const unsigned int borderpx         = 2;  /* border pixel of windows */
+static const float rootcolor[]             = COLOR(0x11111bff);
+static const float bordercolor[]           = COLOR(0x000000ff);
+static const float focuscolor[]            = COLOR(0x000000ff);
+static const float urgentcolor[]           = COLOR(0x000000ff);
 /* To conform the xdg-protocol, set the alpha to zero to restore the old behavior */
 static const float fullscreen_bg[]         = {0.1f, 0.1f, 0.1f, 1.0f}; /* You can also use glsl colors */
 
@@ -25,7 +25,7 @@ static const Rule rules[] = {
 	/* examples:
 	{ "Gimp",     NULL,       0,            1,           -1 },
 	*/
-	{ "firefox",  NULL,       1 << 8,       0,           -1 },
+	{ "firefox",  NULL,       0,       0,           -1 },
 };
 
 /* layout(s) */
@@ -39,12 +39,17 @@ static const Layout layouts[] = {
 /* monitors */
 /* NOTE: ALWAYS add a fallback rule, even if you are completely sure it won't be used */
 static const MonitorRule monrules[] = {
-	/* name       mfact  nmaster scale layout       rotate/reflect                x    y */
-	/* example of a HiDPI laptop monitor:
-	{ "eDP-1",    0.5f,  1,      2,    &layouts[0], WL_OUTPUT_TRANSFORM_NORMAL,   -1,  -1 },
+	/* name       mfact nmaster scale layout       rotate/reflect              x  y  resx resy rate mode adaptive*/
+	/* example of a HiDPI laptop monitor at 120Hz:
+	{ "eDP-1",    0.5f,  1,      2,    &layouts[0], WL_OUTPUT_TRANSFORM_NORMAL, 0, 0, 0, 0, 120.000f, 1, 1},
 	*/
 	/* defaults */
-	{ NULL,       0.55f, 1,      1,    &layouts[0], WL_OUTPUT_TRANSFORM_NORMAL,   -1,  -1 },
+	{ "eDP-1",       0.55f, 1,      1,    &layouts[0], WL_OUTPUT_TRANSFORM_NORMAL, 2560, 0, 1920, 1080, 120.001999f, -1 , 0},
+    { "HDMI-A-1",       0.55f, 1,      1,    &layouts[0], WL_OUTPUT_TRANSFORM_NORMAL, 0, 0, 2560, 1440, 59.951000f, -1 , 0},
+
+	// mode let's the user decide on how dwl should implement the modes:
+	// -1 Sets a custom mode following the users choice
+	// All other number's set the mode at the index n, 0 is the standard mode; see wlr-randr
 };
 
 /* keyboard */
@@ -63,7 +68,7 @@ static const int repeat_delay = 600;
 static const int tap_to_click = 1;
 static const int tap_and_drag = 1;
 static const int drag_lock = 1;
-static const int natural_scrolling = 0;
+static const int natural_scrolling = 1;
 static const int disable_while_typing = 1;
 static const int left_handed = 0;
 static const int middle_button_emulation = 0;
@@ -102,7 +107,8 @@ LIBINPUT_CONFIG_TAP_MAP_LMR -- 1/2/3 finger tap maps to left/middle/right
 static const enum libinput_config_tap_button_map button_map = LIBINPUT_CONFIG_TAP_MAP_LRM;
 
 /* If you want to use the windows key for MODKEY, use WLR_MODIFIER_LOGO */
-#define MODKEY WLR_MODIFIER_ALT
+#define MODKEY WLR_MODIFIER_LOGO
+#define ALTKEY WLR_MODIFIER_ALT
 
 #define TAGKEYS(KEY,SKEY,TAG) \
 	{ MODKEY,                    KEY,            view,            {.ui = 1 << TAG} }, \
@@ -115,28 +121,52 @@ static const enum libinput_config_tap_button_map button_map = LIBINPUT_CONFIG_TA
 
 /* commands */
 static const char *termcmd[] = { "foot", NULL };
-static const char *menucmd[] = { "bemenu-run", NULL };
+static const char *menucmd[] = { "wmenu-run", NULL };
+static const char *browsercmd[] = { "firefox", NULL };
+static const char *passmenucmd[] = { "passmenu", NULL };
+static const char *wificmd[] = { "wifi", NULL };
+static const char *screenshotcmd[] = { "wlsyshot", NULL };
+static const char *bldcmd[] = { "brightness", "down", NULL };
+static const char *blucmd[] = { "brightness", "up", NULL };
+static const char *volupcmd[] = { "volume", "--inc", NULL };
+static const char *voldowncmd[] = { "volume", "--dec", NULL };
+static const char *togglemiccmd[] = { "volume", "--toggle-mic", NULL };
+static const char *togglespkcmd[] = { "volume", "--toggle", NULL };
+static const char *togglemusiccmd[] = { "music", "toggle", NULL };
+static const char *barcmd[] = { "bar", NULL };
 
 static const Key keys[] = {
 	/* Note that Shift changes certain key codes: c -> C, 2 -> at, etc. */
 	/* modifier                  key                 function        argument */
-	{ MODKEY,                    XKB_KEY_p,          spawn,          {.v = menucmd} },
-	{ MODKEY|WLR_MODIFIER_SHIFT, XKB_KEY_Return,     spawn,          {.v = termcmd} },
-	{ MODKEY,                    XKB_KEY_j,          focusstack,     {.i = +1} },
-	{ MODKEY,                    XKB_KEY_k,          focusstack,     {.i = -1} },
-	{ MODKEY,                    XKB_KEY_i,          incnmaster,     {.i = +1} },
-	{ MODKEY,                    XKB_KEY_d,          incnmaster,     {.i = -1} },
-	{ MODKEY,                    XKB_KEY_h,          setmfact,       {.f = -0.05f} },
-	{ MODKEY,                    XKB_KEY_l,          setmfact,       {.f = +0.05f} },
-	{ MODKEY,                    XKB_KEY_Return,     zoom,           {0} },
-	{ MODKEY,                    XKB_KEY_Tab,        view,           {0} },
-	{ MODKEY|WLR_MODIFIER_SHIFT, XKB_KEY_C,          killclient,     {0} },
+	{ MODKEY,                    XKB_KEY_space,      spawn,          {.v = menucmd} },
+    { MODKEY,                    XKB_KEY_b,          spawn,          {.v = barcmd} },
+	{ MODKEY,                    XKB_KEY_p,          spawn,          {.v = passmenucmd} },
+	{ MODKEY,                    XKB_KEY_s,          spawn,          {.v = termcmd} },
+	{ MODKEY,                    XKB_KEY_f,          spawn,          {.v = browsercmd} },
+	{ MODKEY,                    XKB_KEY_w,          spawn,          {.v = wificmd} },
+	{ MODKEY|WLR_MODIFIER_SHIFT, XKB_KEY_S,          spawn,          {.v = screenshotcmd} },
+	{ 0,    XKB_KEY_XF86AudioRaiseVolume,            spawn,          {.v = volupcmd} },
+	{ 0,    XKB_KEY_XF86AudioLowerVolume,            spawn,          {.v = voldowncmd} },
+	{ 0,    XKB_KEY_XF86AudioMicMute,                spawn,          {.v = togglemiccmd} },
+	{ 0,    XKB_KEY_XF86AudioMute,                   spawn,          {.v = togglespkcmd} },
+	{ 0,    XKB_KEY_XF86AudioPlay,                   spawn,          {.v = togglemusiccmd} },
+	{ 0,    XKB_KEY_XF86MonBrightnessUp,             spawn,          {.v = blucmd} },
+	{ 0,    XKB_KEY_XF86MonBrightnessDown,           spawn,          {.v = bldcmd} },
+	{ MODKEY,                    XKB_KEY_a,          focusstack,     {.i = +1} },
+	{ MODKEY,                    XKB_KEY_d,          focusstack,     {.i = -1} },
+	{ ALTKEY,                    XKB_KEY_i,          incnmaster,     {.i = +1} },
+	{ ALTKEY,                    XKB_KEY_d,          incnmaster,     {.i = -1} },
+	{ MODKEY,                    XKB_KEY_q,          setmfact,       {.f = -0.05f} },
+	{ MODKEY,                    XKB_KEY_e,          setmfact,       {.f = +0.05f} },
+	{ ALTKEY,                    XKB_KEY_Return,     zoom,           {0} },
+	{ ALTKEY,                    XKB_KEY_Tab,        view,           {0} },
+	{ MODKEY,                    XKB_KEY_c,          killclient,     {0} },
 	{ MODKEY,                    XKB_KEY_t,          setlayout,      {.v = &layouts[0]} },
-	{ MODKEY,                    XKB_KEY_f,          setlayout,      {.v = &layouts[1]} },
-	{ MODKEY,                    XKB_KEY_m,          setlayout,      {.v = &layouts[2]} },
-	{ MODKEY,                    XKB_KEY_space,      setlayout,      {0} },
+	{ MODKEY,                    XKB_KEY_u,          setlayout,      {.v = &layouts[1]} },
+	{ MODKEY,                    XKB_KEY_i,          setlayout,      {.v = &layouts[2]} },
+	{ ALTKEY,                    XKB_KEY_space,      setlayout,      {0} },
 	{ MODKEY|WLR_MODIFIER_SHIFT, XKB_KEY_space,      togglefloating, {0} },
-	{ MODKEY,                    XKB_KEY_e,         togglefullscreen, {0} },
+	{ ALTKEY,                    XKB_KEY_e,         togglefullscreen, {0} },
 	{ MODKEY,                    XKB_KEY_0,          view,           {.ui = ~0} },
 	{ MODKEY|WLR_MODIFIER_SHIFT, XKB_KEY_parenright, tag,            {.ui = ~0} },
 	{ MODKEY,                    XKB_KEY_comma,      focusmon,       {.i = WLR_DIRECTION_LEFT} },
@@ -164,6 +194,8 @@ static const Key keys[] = {
 	CHVT(7), CHVT(8), CHVT(9), CHVT(10), CHVT(11), CHVT(12),
 };
 
+
+
 static const Button buttons[] = {
 	{ MODKEY, BTN_LEFT,   moveresize,     {.ui = CurMove} },
 	{ MODKEY, BTN_MIDDLE, togglefloating, {0} },
diff --git a/dwl.c b/dwl.c
index dfb3a27..de9ec85 100644
--- a/dwl.c
+++ b/dwl.c
@@ -212,6 +212,11 @@ typedef struct {
 	const Layout *lt;
 	enum wl_output_transform rr;
 	int x, y;
+	int resx;
+	int resy;
+	float rate;
+	int mode;
+	int adaptive;
 } MonitorRule;
 
 typedef struct {
@@ -890,6 +895,7 @@ createmon(struct wl_listener *listener, void *data)
 	/* This event is raised by the backend when a new output (aka a display or
 	 * monitor) becomes available. */
 	struct wlr_output *wlr_output = data;
+	struct wlr_output_mode *mode = wl_container_of(wlr_output->modes.next, mode, link);
 	const MonitorRule *r;
 	size_t i;
 	struct wlr_output_state state;
@@ -918,15 +924,23 @@ createmon(struct wl_listener *listener, void *data)
 			strncpy(m->ltsymbol, m->lt[m->sellt]->symbol, LENGTH(m->ltsymbol));
 			wlr_output_state_set_scale(&state, r->scale);
 			wlr_output_state_set_transform(&state, r->rr);
+
+			if(r->mode == -1)
+				wlr_output_state_set_custom_mode(&state, r->resx, r->resy,
+				(int) (r->rate > 0 ? r->rate * 1000 : 0));
+			else {
+				for (int j = 0; j < r->mode; j++) {
+					mode = wl_container_of(mode->link.next, mode, link);
+				}
+				wlr_output_state_set_mode(&state, mode);
+			}
+
+			wlr_output_state_set_adaptive_sync_enabled(&state, r->adaptive);
 			break;
 		}
 	}
 
-	/* The mode is a tuple of (width, height, refresh rate), and each
-	 * monitor supports only a specific set of modes. We just pick the
-	 * monitor's preferred mode; a more sophisticated compositor would let
-	 * the user configure it. */
-	wlr_output_state_set_mode(&state, wlr_output_preferred_mode(wlr_output));
+	wlr_output_init_render(wlr_output, alloc, drw);
 
 	/* Set up event listeners */
 	LISTEN(&wlr_output->events.frame, &m->frame, rendermon);
